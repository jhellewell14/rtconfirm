// Generated by rstantools.  Do not edit by hand.

/*
    rtconfirm is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rtconfirm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rtconfirm.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_epimodel_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_epimodel");
    reader.add_event(199, 197, "end", "model_epimodel");
    return reader;
}
#include <stan_meta_header.hpp>
class model_epimodel
  : public stan::model::model_base_crtp<model_epimodel> {
private:
        int t;
        std::vector<int> obs_imported;
        std::vector<int> obs_local;
        int tau;
        double si_loc;
        double si_scale;
        double inc_loc;
        double inc_scale;
        double delay_alpha;
        double delay_beta;
        int cut;
        int indw;
        int indv;
        int indc;
        int indk;
        vector_d sivec;
        matrix_d simat;
        vector_d incvec;
        matrix_d incmat;
        matrix_d delaymat;
        vector_d delayvec;
        vector_d conv_delay;
        matrix_d conv_delay_mat;
        vector_d ci;
        vector_d infectiousness;
        vector_d upscaled_inf;
        vector_d inc_conv_delay;
        vector_d inf_back;
        matrix_d cimat;
        std::vector<int> obs_app;
public:
    model_epimodel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_epimodel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_epimodel_namespace::model_epimodel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("obs_imported", "t", t);
            context__.validate_dims("data initialization", "obs_imported", "int", context__.to_vec(t));
            obs_imported = std::vector<int>(t, int(0));
            vals_i__ = context__.vals_i("obs_imported");
            pos__ = 0;
            size_t obs_imported_k_0_max__ = t;
            for (size_t k_0__ = 0; k_0__ < obs_imported_k_0_max__; ++k_0__) {
                obs_imported[k_0__] = vals_i__[pos__++];
            }
            size_t obs_imported_i_0_max__ = t;
            for (size_t i_0__ = 0; i_0__ < obs_imported_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_imported[i_0__]", obs_imported[i_0__], 0);
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("obs_local", "t", t);
            context__.validate_dims("data initialization", "obs_local", "int", context__.to_vec(t));
            obs_local = std::vector<int>(t, int(0));
            vals_i__ = context__.vals_i("obs_local");
            pos__ = 0;
            size_t obs_local_k_0_max__ = t;
            for (size_t k_0__ = 0; k_0__ < obs_local_k_0_max__; ++k_0__) {
                obs_local[k_0__] = vals_i__[pos__++];
            }
            size_t obs_local_i_0_max__ = t;
            for (size_t i_0__ = 0; i_0__ < obs_local_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "obs_local[i_0__]", obs_local[i_0__], 0);
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "tau", "int", context__.to_vec());
            tau = int(0);
            vals_i__ = context__.vals_i("tau");
            pos__ = 0;
            tau = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "si_loc", "double", context__.to_vec());
            si_loc = double(0);
            vals_r__ = context__.vals_r("si_loc");
            pos__ = 0;
            si_loc = vals_r__[pos__++];
            check_greater_or_equal(function__, "si_loc", si_loc, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "si_scale", "double", context__.to_vec());
            si_scale = double(0);
            vals_r__ = context__.vals_r("si_scale");
            pos__ = 0;
            si_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "si_scale", si_scale, 0);
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "inc_loc", "double", context__.to_vec());
            inc_loc = double(0);
            vals_r__ = context__.vals_r("inc_loc");
            pos__ = 0;
            inc_loc = vals_r__[pos__++];
            check_greater_or_equal(function__, "inc_loc", inc_loc, 0);
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "inc_scale", "double", context__.to_vec());
            inc_scale = double(0);
            vals_r__ = context__.vals_r("inc_scale");
            pos__ = 0;
            inc_scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "inc_scale", inc_scale, 0);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "delay_alpha", "double", context__.to_vec());
            delay_alpha = double(0);
            vals_r__ = context__.vals_r("delay_alpha");
            pos__ = 0;
            delay_alpha = vals_r__[pos__++];
            check_greater_or_equal(function__, "delay_alpha", delay_alpha, 0);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "delay_beta", "double", context__.to_vec());
            delay_beta = double(0);
            vals_r__ = context__.vals_r("delay_beta");
            pos__ = 0;
            delay_beta = vals_r__[pos__++];
            check_greater_or_equal(function__, "delay_beta", delay_beta, 0);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "cut", "int", context__.to_vec());
            cut = int(0);
            vals_i__ = context__.vals_i("cut");
            pos__ = 0;
            cut = vals_i__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 21;
            indw = int(0);
            stan::math::fill(indw, std::numeric_limits<int>::min());
            current_statement_begin__ = 22;
            indv = int(0);
            stan::math::fill(indv, std::numeric_limits<int>::min());
            current_statement_begin__ = 23;
            indc = int(0);
            stan::math::fill(indc, std::numeric_limits<int>::min());
            current_statement_begin__ = 24;
            indk = int(0);
            stan::math::fill(indk, std::numeric_limits<int>::min());
            current_statement_begin__ = 25;
            validate_non_negative_index("sivec", "((2 * t) - 1)", ((2 * t) - 1));
            sivec = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * t) - 1));
            stan::math::fill(sivec, DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("simat", "((2 * t) - 1)", ((2 * t) - 1));
            validate_non_negative_index("simat", "((2 * t) - 1)", ((2 * t) - 1));
            simat = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(((2 * t) - 1), ((2 * t) - 1));
            stan::math::fill(simat, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("incvec", "((2 * t) - 1)", ((2 * t) - 1));
            incvec = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * t) - 1));
            stan::math::fill(incvec, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("incmat", "((2 * t) - 1)", ((2 * t) - 1));
            validate_non_negative_index("incmat", "((2 * t) - 1)", ((2 * t) - 1));
            incmat = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(((2 * t) - 1), ((2 * t) - 1));
            stan::math::fill(incmat, DUMMY_VAR__);
            current_statement_begin__ = 29;
            validate_non_negative_index("delaymat", "((2 * t) - 1)", ((2 * t) - 1));
            validate_non_negative_index("delaymat", "((2 * t) - 1)", ((2 * t) - 1));
            delaymat = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(((2 * t) - 1), ((2 * t) - 1));
            stan::math::fill(delaymat, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("delayvec", "((2 * t) - 1)", ((2 * t) - 1));
            delayvec = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * t) - 1));
            stan::math::fill(delayvec, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("conv_delay", "((2 * t) - 1)", ((2 * t) - 1));
            conv_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * t) - 1));
            stan::math::fill(conv_delay, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("conv_delay_mat", "((2 * t) - 1)", ((2 * t) - 1));
            validate_non_negative_index("conv_delay_mat", "((2 * t) - 1)", ((2 * t) - 1));
            conv_delay_mat = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(((2 * t) - 1), ((2 * t) - 1));
            stan::math::fill(conv_delay_mat, DUMMY_VAR__);
            current_statement_begin__ = 33;
            validate_non_negative_index("ci", "((2 * t) - 1)", ((2 * t) - 1));
            ci = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * t) - 1));
            stan::math::fill(ci, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("infectiousness", "((2 * t) - 1)", ((2 * t) - 1));
            infectiousness = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * t) - 1));
            stan::math::fill(infectiousness, DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("upscaled_inf", "t", t);
            upscaled_inf = Eigen::Matrix<double, Eigen::Dynamic, 1>(t);
            stan::math::fill(upscaled_inf, DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("inc_conv_delay", "((2 * t) - 1)", ((2 * t) - 1));
            inc_conv_delay = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * t) - 1));
            stan::math::fill(inc_conv_delay, DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("inf_back", "((2 * t) - 1)", ((2 * t) - 1));
            inf_back = Eigen::Matrix<double, Eigen::Dynamic, 1>(((2 * t) - 1));
            stan::math::fill(inf_back, DUMMY_VAR__);
            current_statement_begin__ = 38;
            validate_non_negative_index("cimat", "((2 * t) - 1)", ((2 * t) - 1));
            validate_non_negative_index("cimat", "((2 * t) - 1)", ((2 * t) - 1));
            cimat = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(((2 * t) - 1), ((2 * t) - 1));
            stan::math::fill(cimat, DUMMY_VAR__);
            current_statement_begin__ = 39;
            validate_non_negative_index("obs_app", "((2 * t) - 1)", ((2 * t) - 1));
            obs_app = std::vector<int>(((2 * t) - 1), int(0));
            stan::math::fill(obs_app, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 42;
            for (int i = 1; i <= ((2 * t) - 1); ++i) {
                current_statement_begin__ = 45;
                stan::model::assign(sivec, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_lt(i, t) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((lognormal_cdf(((i - t) + 1), si_loc, si_scale) - lognormal_cdf((i - t), si_loc, si_scale))) ), 
                            "assigning variable sivec");
                current_statement_begin__ = 49;
                stan::model::assign(incvec, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_lt(i, t) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((lognormal_cdf(((i - t) + 1), inc_loc, inc_scale) - lognormal_cdf((i - t), inc_loc, inc_scale))) ), 
                            "assigning variable incvec");
                current_statement_begin__ = 53;
                stan::model::assign(delayvec, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_gte(i, t) ? stan::math::promote_scalar<double>((gamma_cdf(((i - t) + 1), delay_alpha, delay_beta) - gamma_cdf((i - t), delay_alpha, delay_beta))) : stan::math::promote_scalar<double>(0) ), 
                            "assigning variable delayvec");
            }
            current_statement_begin__ = 57;
            for (int j = (t + 30); j <= ((2 * t) - 1); ++j) {
                current_statement_begin__ = 58;
                stan::model::assign(delayvec, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable delayvec");
            }
            current_statement_begin__ = 64;
            for (int i = 1; i <= ((2 * t) - 1); ++i) {
                current_statement_begin__ = 65;
                for (int j = 1; j <= ((2 * t) - 1); ++j) {
                    current_statement_begin__ = 66;
                    stan::math::assign(indw, ((t + i) - j));
                    current_statement_begin__ = 68;
                    stan::model::assign(simat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (logical_lte(indw, 0) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((logical_gte(indw, ((2 * t) - 1)) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>(get_base1(sivec, indw, "sivec", 1)) )) ), 
                                "assigning variable simat");
                    current_statement_begin__ = 70;
                    stan::model::assign(incmat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (logical_lte(indw, 0) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((logical_gte(indw, ((2 * t) - 1)) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>(get_base1(incvec, indw, "incvec", 1)) )) ), 
                                "assigning variable incmat");
                    current_statement_begin__ = 72;
                    stan::model::assign(delaymat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (logical_lte(((t - i) + j), 0) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((logical_gte(((t - i) + j), ((2 * t) - 1)) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>(get_base1(delayvec, ((t - i) + j), "delayvec", 1)) )) ), 
                                "assigning variable delaymat");
                }
            }
            current_statement_begin__ = 77;
            stan::math::assign(conv_delay, multiply(delaymat, delayvec));
            current_statement_begin__ = 80;
            for (int i = 1; i <= ((2 * t) - 1); ++i) {
                current_statement_begin__ = 81;
                for (int j = 1; j <= ((2 * t) - 1); ++j) {
                    current_statement_begin__ = 82;
                    stan::math::assign(indv, ((t + i) - j));
                    current_statement_begin__ = 83;
                    stan::model::assign(conv_delay_mat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (logical_lte(indv, 0) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((logical_gte(indv, ((2 * t) - 1)) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>(get_base1(conv_delay, indv, "conv_delay", 1)) )) ), 
                                "assigning variable conv_delay_mat");
                }
            }
            current_statement_begin__ = 88;
            stan::math::assign(ci, multiply(simat, conv_delay));
            current_statement_begin__ = 91;
            stan::math::assign(inc_conv_delay, multiply(incmat, delayvec));
            current_statement_begin__ = 93;
            for (int i = 1; i <= ((2 * t) - 1); ++i) {
                current_statement_begin__ = 94;
                stan::model::assign(obs_app, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (logical_gt(i, t) ? 0 : (get_base1(obs_local, i, "obs_local", 1) + get_base1(obs_imported, i, "obs_imported", 1)) ), 
                            "assigning variable obs_app");
            }
            current_statement_begin__ = 97;
            for (int i = 1; i <= ((2 * t) - 1); ++i) {
                current_statement_begin__ = 98;
                for (int j = 1; j <= ((2 * t) - 1); ++j) {
                    current_statement_begin__ = 101;
                    stan::math::assign(indk, ((t + (i - 1)) - (j - 1)));
                    current_statement_begin__ = 102;
                    stan::model::assign(cimat, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (logical_lte(indk, 0) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((logical_gt(indk, ((2 * t) - 1)) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>(get_base1(ci, indk, "ci", 1)) )) ), 
                                "assigning variable cimat");
                }
            }
            current_statement_begin__ = 107;
            stan::math::assign(infectiousness, multiply(cimat, to_vector(obs_app)));
            current_statement_begin__ = 109;
            for (int i = 1; i <= ((2 * t) - 1); ++i) {
                current_statement_begin__ = 110;
                stan::model::assign(infectiousness, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            max(static_cast<std::vector<double> >(stan::math::array_builder<double >().add(get_base1(infectiousness, i, "infectiousness", 1)).add(1E-06).array())), 
                            "assigning variable infectiousness");
            }
            current_statement_begin__ = 114;
            for (int g = 1; g <= t; ++g) {
                current_statement_begin__ = 115;
                stan::model::assign(upscaled_inf, 
                            stan::model::cons_list(stan::model::index_uni(g), stan::model::nil_index_list()), 
                            (get_base1(infectiousness, g, "infectiousness", 1) / (1 - sum(stan::model::rvalue(ci, stan::model::cons_list(stan::model::index_min_max(1, g), stan::model::nil_index_list()), "ci")))), 
                            "assigning variable upscaled_inf");
            }
            current_statement_begin__ = 119;
            for (int i = 1; i <= ((2 * t) - 1); ++i) {
                current_statement_begin__ = 120;
                stan::model::assign(inf_back, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable inf_back");
            }
            current_statement_begin__ = 123;
            for (int k = 1; k <= ((2 * t) - 1); ++k) {
                current_statement_begin__ = 124;
                for (int j = 1; j <= ((2 * t) - 1); ++j) {
                    current_statement_begin__ = 125;
                    stan::math::assign(indc, ((j - k) + t));
                    current_statement_begin__ = 126;
                    stan::model::assign(inf_back, 
                                stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), 
                                (stan::model::rvalue(inf_back, stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list()), "inf_back") + (logical_lte(indc, 0) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((logical_gte(indc, ((2 * t) - 1)) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((get_base1(infectiousness, j, "infectiousness", 1) * get_base1(inc_conv_delay, ((j - k) + t), "inc_conv_delay", 1))) )) )), 
                                "assigning variable inf_back");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 132;
            validate_non_negative_index("R", "t", t);
            num_params_r__ += (1 * t);
            current_statement_begin__ = 133;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_epimodel() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 132;
        if (!(context__.contains_r("R")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable R missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("R");
        pos__ = 0U;
        validate_non_negative_index("R", "t", t);
        context__.validate_dims("parameter initialization", "R", "double", context__.to_vec(t));
        std::vector<double> R(t, double(0));
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            R[k_0__] = vals_r__[pos__++];
        }
        size_t R_i_0_max__ = t;
        for (size_t i_0__ = 0; i_0__ < R_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, R[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable R: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 133;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 132;
            std::vector<local_scalar_t__> R;
            size_t R_d_0_max__ = t;
            R.reserve(R_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < R_d_0_max__; ++d_0__) {
                if (jacobian__)
                    R.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    R.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 133;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_lb_constrain(0, lp__);
            else
                phi = in__.scalar_lb_constrain(0);
            // model body
            current_statement_begin__ = 139;
            lp_accum__.add(gamma_log<propto__>(R, 1, 0.2));
            current_statement_begin__ = 141;
            lp_accum__.add(normal_log<propto__>(phi, 0, 1));
            if (phi < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            current_statement_begin__ = 144;
            for (int s = (tau + 1); s <= t; ++s) {
                current_statement_begin__ = 145;
                for (int i = ((s - tau) + 1); i <= s; ++i) {
                    current_statement_begin__ = 147;
                    lp_accum__.add(neg_binomial_2_log(get_base1(obs_local, i, "obs_local", 1), (get_base1(R, s, "R", 1) * get_base1(upscaled_inf, i, "upscaled_inf", 1)), (1 / stan::math::sqrt(phi))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("R");
        names__.push_back("phi");
        names__.push_back("inf_cases");
        names__.push_back("inf_R");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((t - cut));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((t - cut));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_epimodel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> R;
        size_t R_d_0_max__ = t;
        R.reserve(R_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < R_d_0_max__; ++d_0__) {
            R.push_back(in__.scalar_lb_constrain(0));
        }
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            vars__.push_back(R[k_0__]);
        }
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(phi);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 155;
            validate_non_negative_index("inf_cases", "(t - cut)", (t - cut));
            Eigen::Matrix<double, Eigen::Dynamic, 1> inf_cases((t - cut));
            stan::math::initialize(inf_cases, DUMMY_VAR__);
            stan::math::fill(inf_cases, DUMMY_VAR__);
            current_statement_begin__ = 156;
            validate_non_negative_index("inf_R", "(t - cut)", (t - cut));
            Eigen::Matrix<double, Eigen::Dynamic, 1> inf_R((t - cut));
            stan::math::initialize(inf_R, DUMMY_VAR__);
            stan::math::fill(inf_R, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 192;
            for (int i = 1; i <= (t - cut); ++i) {
                current_statement_begin__ = 193;
                stan::model::assign(inf_R, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(R, (i + cut), "R", 1), 
                            "assigning variable inf_R");
                current_statement_begin__ = 194;
                stan::model::assign(inf_cases, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            neg_binomial_2_rng((get_base1(inf_R, i, "inf_R", 1) * get_base1(infectiousness, (i + cut), "infectiousness", 1)), (1 / stan::math::sqrt(phi)), base_rng__), 
                            "assigning variable inf_cases");
            }
            // validate, write generated quantities
            current_statement_begin__ = 155;
            size_t inf_cases_j_1_max__ = (t - cut);
            for (size_t j_1__ = 0; j_1__ < inf_cases_j_1_max__; ++j_1__) {
                vars__.push_back(inf_cases(j_1__));
            }
            current_statement_begin__ = 156;
            size_t inf_R_j_1_max__ = (t - cut);
            for (size_t j_1__ = 0; j_1__ < inf_R_j_1_max__; ++j_1__) {
                vars__.push_back(inf_R(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_epimodel";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t inf_cases_j_1_max__ = (t - cut);
        for (size_t j_1__ = 0; j_1__ < inf_cases_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inf_cases" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t inf_R_j_1_max__ = (t - cut);
        for (size_t j_1__ = 0; j_1__ < inf_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inf_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t R_k_0_max__ = t;
        for (size_t k_0__ = 0; k_0__ < R_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "R" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t inf_cases_j_1_max__ = (t - cut);
        for (size_t j_1__ = 0; j_1__ < inf_cases_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inf_cases" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t inf_R_j_1_max__ = (t - cut);
        for (size_t j_1__ = 0; j_1__ < inf_R_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inf_R" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_epimodel_namespace::model_epimodel stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
